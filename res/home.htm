<!doctype html>
<html>

<head>
    <style>
        body {
            height: 100%;
            margin: 0 0 0 0;
            poadding: 0 0 0 0;
            background-color: #ffffff;
        }

        .layout-container {
            position: relative;
            width: 100%;
            height: 100vh;
            overflow: hidden;
            background-color: $ffffa0;
        }

        .layout-header {
            display: block;
			position: fixed;
            left: 0;
            top: 0;
            right: 0;
            height: 50px;
        }
		
		.panel-container {
			position: relative;
			width: 100%;
			height: 100%;
			background-color: red;
		}

        .layout-body {}

        .content-container {
			position: relative;
			width: 100%;
			height: 100vh;
			display: block;
			overflow-y: hidden;
		}

        .content1 {
            -background-image: url("background1.jpg");
        }

        .content2 {
            -background-image: url("background2.jpg");
        }

        .content3 {
            -background-image: url("background3.jpg");
        }

        .content-outer {
            position: relative;
			height: 100vh;
			background-color: #ffffff;
        }

        .content-inner {
            position: absolute;
            min-width: 500px;
            min-height: 400px;
            top: 50px;
            right: 50px;
            bottom: 50px;
            left: 50px;
            background: #fafafa; /* Old browsers */
            background: -moz-linear-gradient(top, #fafafa 0%, #f5f5f5 51%, #e9e9e9 100%); /* FF3.6-15 */
            background: -webkit-linear-gradient(top, #fafafa 0%,#f5f5f5 51%,#e9e9e9 100%); /* Chrome10-25,Safari5.1-6 */
            background: linear-gradient(to bottom, #fafafa 0%,#f5f5f5 51%,#e9e9e9 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
            filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#fafafa', endColorstr='#e9e9e9',GradientType=0 );
        }

        #guide {
            font-family: 'Segoe UI Light';
            font-size: 24px;
            color: #808080;
        }

        .slot-container {
            width: 100%;
            display: table;
            text-align: center;
            background-color: yellowgreen;
        }

        .progress {
            min-width: 300px;
            min-height: 300px;
            display: inline-block;
            background-color: gold;
            vertical-align: middle;
        }

    </style>
    <link rel="stylesheet" href="/css/bootstrap-grid.min.css" />
</head>

<body>
    <div class="layout-container">
		<div class="layout-header">
			<div class="panel-container">
			</div>
		</div>
        <div class="layout-body">
            <div id="content-entire" class="content-container">
                <div class="content-outer">
					<div id="dropzone" class="content-inner content1">
                        <div id="guide">DRAG AND DROP FILES OR CLICK TO SELECT</div>
                        <div class="slot-container"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="/js/jquery-1.12.4.min.js"></script>
    <script srv="/js/bootstrap.min.js"></script>
    <script src="/js/circle-progress.min.js"></script>
    <script src="/js/flow.js"></script>
    <script>


        function validateGuid(guid) {

            if (typeof guid !== 'string') return false;

            var regexValidateGuid = /^(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}$/gi;

            return regexValidateGuid.test(guid);

        }

        function getTicket(callback) {

            var timestamp = new Date().toTimeString();

            $.ajax({

                url: '/@ticket',
                method: 'get',
                cache: false

            }).done(function (res) {
                
                if (validateGuid(res)) {

                    if (typeof callback === 'function') callback.call(this, res);

                }
                else {

                    console.error('invalid ticket: %s', res);
                }
                                
                });


            return;

        }

        function addFileToSlot() {

            var $ul = $(document.createElement('ul'));
            var $li = $(document.createElement('li'));

        }

        $(document).ready(function () {

            var uri = location.href;

            var flow = new Flow({
                target: uri,
                query: {
                    upload_token: 'rasupload'
                },
                chunkSize: 16 * 1024 * 1024,
                testChunks: false
            });

            getTicket(function (guid) {
                flow.opts.query.sid = guid; //slot id
            });

            if (!flow.support) {
                console.log('Flow.js isn\'t support');
            }
            else {
                flow.assignDrop($('#dropzone')[0]);
            }

            flow.on('fileAdded', function (file, event) {
                //console.log('fileadded: ', file, event);
                flow.totalSize += file.size;
            });

            flow.on('filesSubmitted', function (file) {
                console.log("File was submitted. Starting to upload.");

                getTicket(function (guid) {

                    flow.totalSize = 0;
                    flow.uploadedSize = 0;

                    flow.files.forEach(function (element) {
                        flow.totalSize += element.size;
                    })

                    flow.opts.query.tlen = flow.files.length;
                    flow.opts.query.tid = guid; //transaction idgo aheaon timed
                    flow.upload();

                    $(document.createElement('div'))
                        .attr('id', 'uploadprogress1')
                        .addClass('progress')
                        .circleProgress({
                            size: 200,
                            value: 0.0,
                            animation: false
                        })
                        .appendTo(".slot-container");

                });
            });

            flow.on('fileSuccess', function (file, message) {
                console.log(file, message);
            });

            flow.on('fileError', function (file, message) {
                console.log(file, message);
            });

            flow.on("complete", function () {
                console.log("The upload has completed");
                $('#uploadprogress1').circleProgress({
                    value: 1
                });
                flow.cancel();
            });

            flow.on("fileError", function (file, message) {
                console.log("The upload has failed");
                flow.cancel();
            });

            flow.on('catchAll', function () {
                console.log.apply(console, arguments);
            });

            flow.on('fileProgress', function (file, chunk) {

                flow.uploadedSize += chunk.endByte;
                //var percent = (chunk.endByte / chunk.fileObj.size).toFixed(2);
                var percent = (flow.uploadedSize / flow.totalSize).toFixed(2);
                //console.log('file: %s (%s)', file.name, percent);
                $('#uploadprogress1').circleProgress({
                    value: percent
                });
            });

        });

    </script>
</body>

</html>